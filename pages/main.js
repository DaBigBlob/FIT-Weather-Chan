(()=>{"use strict";var t={670:(t,o)=>{function e(t){return null!=t}Object.defineProperty(o,"__esModule",{value:!0}),o.dateIsoToUnixSec=o.CtoF=o.FtoC=o.get_color_int=o.exists=void 0,o.exists=e,o.get_color_int=function(t){let o="";if(e(t))if(t.high<=t.low&&(t.high=t.low+2),(t.low>t.mild||t.high<t.mild)&&(t.mild=(t.high+t.low)/2),t.tmpr<=t.low&&(t.tmpr=t.low),t.tmpr>=t.high&&(t.tmpr=t.high),t.tmpr>t.mild){const e=(t.tmpr-t.mild)/(t.high-t.mild);o=Math.floor(127+127*e).toString(16),o+="7f"+Math.floor(255*(t.tmpr-25)/15).toString(16)}else{const e=(t.tmpr-t.low)/(t.mild-t.low);o=Math.floor(127*e).toString(16),o+="7f"+Math.floor(255*(t.tmpr-25)/15).toString(16)}else{const t="0123456789abcdef",e=new Uint8Array(6);crypto.getRandomValues(e),e.forEach((e=>o+=t.charAt(e%t.length)))}return o},o.FtoC=function(t){return 5*(t-32)/9},o.CtoF=function(t){return 9*t/5+32},o.dateIsoToUnixSec=function(t){return new Date(t).getTime()/1e3}}},o={};function e(r){var n=o[r];if(void 0!==n)return n.exports;var i=o[r]={exports:{}};return t[r](i,i.exports,e),i.exports}(()=>{const t=e(670);class o{constructor(o,e,r){this.log_box=o,(0,t.exists)(e)&&(o.innerHTML=e),this.locked=!!(0,t.exists)(r)&&r}add(t){return!this.locked&&(this.log_box.innerHTML+=`${t}\n`,!0)}lock(t){return this.locked=t,!0}clr(){return this.log_box.innerHTML="",!0}}const r=document.getElementById("temperature_color_range"),n=document.getElementById("temperature_number"),i=document.getElementById("log_box"),l=document.body;if((0,t.exists)(r)&&n&&i&&l){const e=new o(i);r.oninput=()=>{const o=parseInt((0,t.get_color_int)({high:parseFloat(r.max),low:parseFloat(r.min),mild:25,tmpr:parseFloat(r.value)}).toString(),16);n.innerHTML=`${r.value}°C`,l.style.backgroundColor=`#${o}`,e.add(`${r.value}°C\t#${o}`),e.clr()}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,